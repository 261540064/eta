
==================== Optimised Cmm ====================
2016-06-29 15:38:02.883768 UTC

section "data" { __stginit_main@main:MinimalBase:
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.884338 UTC

section "data" {
    MinimalBase.thousand_closure:
        const MinimalBase.I#_static_info;
        const 1000;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.88583 UTC

section "data" {
    MinimalBase.+_closure:
        const MinimalBase.+_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.886164 UTC

MinimalBase.+_entry() //  [R3, R2]
        { [(cDh,
            block_cDh_info:
                const 1;
                const 32;),
           (cDk,
            MinimalBase.+_info:
                const 8589934607;
                const 0;
                const 15;),
           (cDn,
            block_cDn_info:
                const 65;
                const 32;)]
        }
    {offset
      cDk:
          if ((Sp + -16) < SpLim) goto cDw; else goto cDx;
      cDw:
          // nop
          // nop
          R1 = MinimalBase.+_closure;
          call (I64[BaseReg - 8])(R3, R2, R1) args: 8, res: 0, upd: 8;
      cDx:
          I64[Sp - 16] = block_cDh_info;
          R1 = R2;
          P64[Sp - 8] = R3;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto cDh; else goto cDi;
      cDi:
          call (I64[R1])(R1) returns to cDh, args: 8, res: 8, upd: 8;
      cDh:
          I64[Sp] = block_cDn_info;
          _sBV::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _sBV::I64;
          if (R1 & 7 != 0) goto cDn; else goto cDo;
      cDo:
          call (I64[R1])(R1) returns to cDn, args: 8, res: 8, upd: 8;
      cDn:
          Hp = Hp + 16;
          if (Hp > I64[BaseReg + 856]) goto cDB; else goto cDA;
      cDB:
          I64[BaseReg + 904] = 16;
          // nop
          call stg_gc_unpt_r1(R1) returns to cDn, args: 8, res: 8, upd: 8;
      cDA:
          _sBY::I64 = I64[Sp + 8] + I64[R1 + 7];
          I64[Hp - 8] = MinimalBase.I#_con_info;
          I64[Hp] = _sBY::I64;
          R1 = Hp - 7;
          Sp = Sp + 16;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.891191 UTC

section "data" {
    MinimalBase.$wenumFromTo_closure:
        const MinimalBase.$wenumFromTo_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.891599 UTC

sat_sC9_entry() //  [R1]
        { [(cE2,
            sat_sC9_info:
                const 8589934593;
                const 16;)]
        }
    {offset
      cE2:
          if ((Sp + -16) < SpLim) goto cE3; else goto cE9;
      cE3:
          // nop
          call (I64[BaseReg - 16])(R1) args: 8, res: 0, upd: 8;
      cE9:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          _sC4::I64 = I64[R1 + 32];
          if (_sC4::I64 == I64[R1 + 24]) goto cEb; else goto cEc;
      cEb:
          R1 = []_closure+1;
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
      cEc:
          R2 = _sC4::I64 + 1;
          R1 = P64[R1 + 16];
          Sp = Sp - 16;
          call go_sC3_info(R2, R1) args: 24, res: 0, upd: 24;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.89325 UTC

go_sC3_entry() //  [R2, R1]
        { [(cEh,
            go_sC3_info:
                const 4294967300;
                const 4294967296;
                const 11;)]
        }
    {offset
      cEh:
          Hp = Hp + 80;
          if (Hp > I64[BaseReg + 856]) goto cEl; else goto cEk;
      cEl:
          I64[BaseReg + 904] = 80;
          // nop
          // nop
          call (I64[BaseReg - 8])(R2, R1) args: 8, res: 0, upd: 8;
      cEk:
          _sC0::I64 = I64[R1 + 7];
          I64[Hp - 72] = sat_sC9_info;
          P64[Hp - 56] = R1;
          I64[Hp - 48] = _sC0::I64;
          I64[Hp - 40] = R2;
          I64[Hp - 32] = MinimalBase.I#_con_info;
          I64[Hp - 24] = R2;
          I64[Hp - 16] = :_con_info;
          P64[Hp - 8] = Hp - 31;
          P64[Hp] = Hp - 72;
          R1 = Hp - 14;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.895078 UTC

MinimalBase.$wenumFromTo_entry() //  [R3, R2]
        { [(cEm,
            MinimalBase.$wenumFromTo_info:
                const 8589934604;
                const 0;
                const 15;)]
        }
    {offset
      cEm:
          Hp = Hp + 16;
          if (Hp > I64[BaseReg + 856]) goto cEq; else goto cEp;
      cEq:
          I64[BaseReg + 904] = 16;
          // nop
          // nop
          R1 = MinimalBase.$wenumFromTo_closure;
          call (I64[BaseReg - 8])(R3, R2, R1) args: 8, res: 0, upd: 8;
      cEp:
          if (%MO_S_Gt_W64(R2, R3)) goto cEv; else goto cEw;
      cEv:
          Hp = Hp - 16;
          R1 = []_closure+1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      cEw:
          I64[Hp - 8] = go_sC3_info;
          I64[Hp] = R3;
          // nop
          R1 = Hp - 7;
          call go_sC3_info(R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.897256 UTC

section "data" {
    MinimalBase.enumFromTo_closure:
        const MinimalBase.enumFromTo_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.897625 UTC

MinimalBase.enumFromTo_entry() //  [R3, R2]
        { [(cEL,
            block_cEL_info:
                const 1;
                const 32;),
           (cEO,
            MinimalBase.enumFromTo_info:
                const 8589934607;
                const 0;
                const 15;),
           (cER,
            block_cER_info:
                const 65;
                const 32;)]
        }
    {offset
      cEO:
          if ((Sp + -16) < SpLim) goto cES; else goto cET;
      cES:
          // nop
          // nop
          R1 = MinimalBase.enumFromTo_closure;
          call (I64[BaseReg - 8])(R3, R2, R1) args: 8, res: 0, upd: 8;
      cET:
          I64[Sp - 16] = block_cEL_info;
          R1 = R2;
          P64[Sp - 8] = R3;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto cEL; else goto cEM;
      cEM:
          call (I64[R1])(R1) returns to cEL, args: 8, res: 8, upd: 8;
      cEL:
          I64[Sp] = block_cER_info;
          _sCd::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _sCd::I64;
          if (R1 & 7 != 0) goto cER; else goto cEV;
      cEV:
          call (I64[R1])(R1) returns to cER, args: 8, res: 8, upd: 8;
      cER:
          R3 = I64[R1 + 7];
          R2 = I64[Sp + 8];
          Sp = Sp + 16;
          call MinimalBase.$wenumFromTo_info(R3, R2) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.900089 UTC

section "data" {
    MinimalBase.one_closure:
        const MinimalBase.I#_static_info;
        const 1;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.901067 UTC

section "data" {
    MinimalBase.printInt1_closure:
        const MinimalBase.printInt1_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.901418 UTC

MinimalBase.printInt1_entry() //  [R2]
        { [(cF9,
            block_cF9_info:
                const 0;
                const 32;),
           (cFc,
            MinimalBase.printInt1_info:
                const 8589934597;
                const 0;
                const 15;),
           (cFf,
            block_cFf_info:
                const 0;
                const 32;)]
        }
    {offset
      cFc:
          if ((Sp + -8) < SpLim) goto cFg; else goto cFh;
      cFg:
          // nop
          R1 = MinimalBase.printInt1_closure;
          call (I64[BaseReg - 8])(R2, R1) args: 8, res: 0, upd: 8;
      cFh:
          I64[Sp - 8] = block_cF9_info;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto cF9; else goto cFa;
      cFa:
          call (I64[R1])(R1) returns to cF9, args: 8, res: 8, upd: 8;
      cF9:
          I64[Sp] = block_cFf_info;
          R1 = I64[R1 + 7];
          call print_printIntzh(R1) returns to cFf, args: 8, res: 8, upd: 8;
      cFf:
          R1 = GHC.Tuple.()_closure+1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.903948 UTC

section "data" {
    MinimalBase.printInt_closure:
        const MinimalBase.printInt_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.904397 UTC

MinimalBase.printInt_entry() //  [R2]
        { [(cFt,
            MinimalBase.printInt_info:
                const 8589934597;
                const 0;
                const 15;)]
        }
    {offset
      cFt:
          // nop
          call MinimalBase.printInt1_info(R2) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.90495 UTC

section "data" {
    MinimalBase.ten_closure:
        const MinimalBase.I#_static_info;
        const 10;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.90561 UTC

section "data" {
    MinimalBase.zero_closure:
        const MinimalBase.I#_static_info;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.906322 UTC

section "data" {
    MinimalBase.I#_closure:
        const MinimalBase.I#_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.906596 UTC

MinimalBase.I#_entry() //  [R2]
        { [(cFG,
            MinimalBase.I#_info:
                const 4294967300;
                const 0;
                const 15;)]
        }
    {offset
      cFG:
          Hp = Hp + 16;
          if (Hp > I64[BaseReg + 856]) goto cFK; else goto cFJ;
      cFK:
          I64[BaseReg + 904] = 16;
          // nop
          R1 = MinimalBase.I#_closure;
          call (I64[BaseReg - 8])(R2, R1) args: 8, res: 0, upd: 8;
      cFJ:
          I64[Hp - 8] = MinimalBase.I#_con_info;
          I64[Hp] = R2;
          R1 = Hp - 7;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.90787 UTC

section "readonly" {
    iFQ_str:
        I8[] [109,97,105,110,58,77,105,110,105,109,97,108,66,97,115,101,46,73,35]
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.908266 UTC

MinimalBase.I#_con_entry() //  []
        { [(cFO,
            MinimalBase.I#_con_info:
                const iFQ_str-MinimalBase.I#_con_info;
                const 4294967296;
                const 3;)]
        }
    {offset
      cFO:
          R1 = R1 + 1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.909324 UTC

section "readonly" {
    iFR_str:
        I8[] [109,97,105,110,58,77,105,110,105,109,97,108,66,97,115,101,46,73,35]
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.909613 UTC

MinimalBase.I#_static_entry() //  []
        { [(cFP,
            MinimalBase.I#_static_info:
                const iFR_str-MinimalBase.I#_static_info;
                const 4294967296;
                const 8;)]
        }
    {offset
      cFP:
          R1 = R1 + 1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:02.910164 UTC

section "relreadonly" { SFY_srt:
}

