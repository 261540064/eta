
==================== Optimised Cmm ====================
2016-06-29 15:38:03.271512 UTC

section "data" { __stginit_main@main:Main:
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.273266 UTC

section "data" {
    Main.map_closure:
        const Main.map_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.273667 UTC

sat_s2Ln_entry() //  [R1]
        { [(c2MA,
            sat_s2Ln_info:
                const 2;
                const 19;)]
        }
    {offset
      c2MA:
          if ((Sp + -16) < SpLim) goto c2MB; else goto c2MC;
      c2MB:
          // nop
          call (I64[BaseReg - 16])(R1) args: 8, res: 0, upd: 8;
      c2MC:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          R3 = P64[R1 + 24];
          R2 = P64[R1 + 16];
          Sp = Sp - 16;
          call Main.map_info(R3, R2) args: 24, res: 0, upd: 24;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.274786 UTC

Main.map_entry() //  [R3, R2]
        { [(c2Mq,
            block_c2Mq_info:
                const 1;
                const 32;),
           (c2MK,
            Main.map_info:
                const 8589934607;
                const 0;
                const 15;)]
        }
    {offset
      c2MK:
          if ((Sp + -16) < SpLim) goto c2ML; else goto c2MM;
      c2ML:
          // nop
          // nop
          R1 = Main.map_closure;
          call (I64[BaseReg - 8])(R3, R2, R1) args: 8, res: 0, upd: 8;
      c2MM:
          I64[Sp - 16] = block_c2Mq_info;
          R1 = R3;
          P64[Sp - 8] = R2;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c2Mq; else goto c2Mr;
      c2Mr:
          call (I64[R1])(R1) returns to c2Mq, args: 8, res: 8, upd: 8;
      c2Mq:
          if (R1 & 7 >= 2) goto c2MI; else goto c2MJ;
      c2MI:
          Hp = Hp + 88;
          if (Hp > I64[BaseReg + 856]) goto c2MT; else goto c2MS;
      c2MT:
          I64[BaseReg + 904] = 88;
          // nop
          call stg_gc_unpt_r1(R1) returns to c2Mq, args: 8, res: 8, upd: 8;
      c2MS:
          _s2Lk::P64 = P64[R1 + 6];
          _s2Ll::P64 = P64[R1 + 14];
          I64[Hp - 80] = sat_s2Ln_info;
          _s2Lh::P64 = P64[Sp + 8];
          P64[Hp - 64] = _s2Lh::P64;
          P64[Hp - 56] = _s2Ll::P64;
          I64[Hp - 48] = stg_ap_2_upd_info;
          P64[Hp - 32] = _s2Lh::P64;
          P64[Hp - 24] = _s2Lk::P64;
          I64[Hp - 16] = :_con_info;
          P64[Hp - 8] = Hp - 48;
          P64[Hp] = Hp - 80;
          R1 = Hp - 14;
          Sp = Sp + 16;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c2MJ:
          R1 = []_closure+1;
          Sp = Sp + 16;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.278213 UTC

section "data" {
    Main.caf2_closure:
        const Main.caf2_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.278647 UTC

Main.caf2_entry() //  [R2]
        { [(c2N9,
            block_c2N9_info:
                const 0;
                const 32;),
           (c2Nc,
            Main.caf2_info:
                const 4294967301;
                const 0;
                const 15;)]
        }
    {offset
      c2Nc:
          if ((Sp + -8) < SpLim) goto c2Nj; else goto c2Nk;
      c2Nj:
          // nop
          R1 = Main.caf2_closure;
          call (I64[BaseReg - 8])(R2, R1) args: 8, res: 0, upd: 8;
      c2Nk:
          I64[Sp - 8] = block_c2N9_info;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c2N9; else goto c2Na;
      c2Na:
          call (I64[R1])(R1) returns to c2N9, args: 8, res: 8, upd: 8;
      c2N9:
          Hp = Hp + 16;
          if (Hp > I64[BaseReg + 856]) goto c2Nn; else goto c2Nm;
      c2Nn:
          I64[BaseReg + 904] = 16;
          // nop
          call stg_gc_unpt_r1(R1) returns to c2N9, args: 8, res: 8, upd: 8;
      c2Nm:
          _s2Lr::I64 = I64[R1 + 7] + 1;
          I64[Hp - 8] = MinimalBase.I#_con_info;
          I64[Hp] = _s2Lr::I64;
          R1 = Hp - 7;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.282333 UTC

section "data" {
    Main.caf1_closure:
        const Main.caf1_info;
        const 0;
        const 0;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.282766 UTC

Main.caf1_entry() //  [R1]
        { [(c2Nz,
            Main.caf1_info:
                const 0;
                const 22;)]
        }
    {offset
      c2Nz:
          if ((Sp + -16) < SpLim) goto c2NA; else goto c2NB;
      c2NA:
          // nop
          call (I64[BaseReg - 16])(R1) args: 8, res: 0, upd: 8;
      c2NB:
          (_c2Nw::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c2Nw::I64 == 0) goto c2Ny; else goto c2Nx;
      c2Ny:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c2Nx:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c2Nw::I64;
          R3 = 1000;
          R2 = 1;
          Sp = Sp - 16;
          call MinimalBase.$wenumFromTo_info(R3,
                                             R2) args: 24, res: 0, upd: 24;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.285083 UTC

section "data" {
    Main.caf_closure:
        const Main.caf_info;
        const 0;
        const 0;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.285507 UTC

Main.caf_entry() //  [R1]
        { [(c2NM,
            Main.caf_info:
                const S2NP_srt-Main.caf_info;
                const 0;
                const 4294967318;)]
        }
    {offset
      c2NM:
          if ((Sp + -16) < SpLim) goto c2NN; else goto c2NO;
      c2NN:
          // nop
          call (I64[BaseReg - 16])(R1) args: 8, res: 0, upd: 8;
      c2NO:
          (_c2NJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c2NJ::I64 == 0) goto c2NL; else goto c2NK;
      c2NL:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c2NK:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c2NJ::I64;
          R3 = Main.caf1_closure;
          R2 = Main.caf2_closure+1;
          Sp = Sp - 16;
          call Main.map_info(R3, R2) args: 24, res: 0, upd: 24;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.28809 UTC

section "data" {
    Main.$wsum_closure:
        const Main.$wsum_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.288515 UTC

Main.$wsum_entry() //  [R2]
        { [(c2NY,
            block_c2NY_info:
                const 0;
                const 32;),
           (c2O8,
            Main.$wsum_info:
                const 4294967301;
                const 0;
                const 15;),
           (c2Og,
            block_c2Og_info:
                const 1;
                const 32;),
           (c2Ol,
            block_c2Ol_info:
                const 65;
                const 32;)]
        }
    {offset
      c2O8:
          if ((Sp + -16) < SpLim) goto c2O9; else goto c2Oa;
      c2O9:
          // nop
          R1 = Main.$wsum_closure;
          call (I64[BaseReg - 8])(R2, R1) args: 8, res: 0, upd: 8;
      c2Oa:
          I64[Sp - 8] = block_c2NY_info;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c2NY; else goto c2NZ;
      c2NZ:
          call (I64[R1])(R1) returns to c2NY, args: 8, res: 8, upd: 8;
      c2NY:
          if (R1 & 7 >= 2) goto c2O6; else goto c2O7;
      c2O6:
          I64[Sp - 8] = block_c2Og_info;
          _s2Lv::P64 = P64[R1 + 14];
          R1 = P64[R1 + 6];
          P64[Sp] = _s2Lv::P64;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c2Og; else goto c2Oh;
      c2Oh:
          call (I64[R1])(R1) returns to c2Og, args: 8, res: 8, upd: 8;
      c2Og:
          I64[Sp] = block_c2Ol_info;
          R2 = P64[Sp + 8];
          I64[Sp + 8] = I64[R1 + 7];
          call Main.$wsum_info(R2) returns to c2Ol, args: 8, res: 8, upd: 8;
      c2Ol:
          R1 = I64[Sp + 8] + R1;
          Sp = Sp + 16;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c2O7:
          R1 = 0;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.291718 UTC

section "data" {
    Main.sum_closure:
        const Main.sum_info;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.292203 UTC

Main.sum_entry() //  [R2]
        { [(c2OF,
            block_c2OF_info:
                const 0;
                const 32;),
           (c2OH,
            Main.sum_info:
                const 4294967301;
                const 0;
                const 15;)]
        }
    {offset
      c2OH:
          if ((Sp + -8) < SpLim) goto c2OL; else goto c2OM;
      c2OL:
          // nop
          R1 = Main.sum_closure;
          call (I64[BaseReg - 8])(R2, R1) args: 8, res: 0, upd: 8;
      c2OM:
          I64[Sp - 8] = block_c2OF_info;
          // nop
          Sp = Sp - 8;
          call Main.$wsum_info(R2) returns to c2OF, args: 8, res: 8, upd: 8;
      c2OF:
          Hp = Hp + 16;
          if (Hp > I64[BaseReg + 856]) goto c2OP; else goto c2OO;
      c2OP:
          I64[BaseReg + 904] = 16;
          // nop
          call stg_gc_unbx_r1(R1) returns to c2OF, args: 8, res: 8, upd: 8;
      c2OO:
          I64[Hp - 8] = MinimalBase.I#_con_info;
          I64[Hp] = R1;
          R1 = Hp - 7;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.294515 UTC

section "data" {
    Main.main1_closure:
        const Main.main1_info;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.294924 UTC

Main.main1_entry() //  []
        { [(c2OY,
            block_c2OY_info:
                const 0;
                const 32;),
           (c2P0,
            Main.main1_info:
                const S2NP_srt-Main.main1_info+8;
                const 4294967299;
                const 0;
                const 12884901903;),
           (c2P3,
            block_c2P3_info:
                const 0;
                const 32;)]
        }
    {offset
      c2P0:
          if ((Sp + -8) < SpLim) goto c2P4; else goto c2P5;
      c2P4:
          R1 = Main.main1_closure;
          call (I64[BaseReg - 8])(R1) args: 8, res: 0, upd: 8;
      c2P5:
          I64[Sp - 8] = block_c2OY_info;
          R2 = Main.caf_closure;
          Sp = Sp - 8;
          call Main.$wsum_info(R2) returns to c2OY, args: 8, res: 8, upd: 8;
      c2OY:
          I64[Sp] = block_c2P3_info;
          // nop
          call print_printIntzh(R1) returns to c2P3, args: 8, res: 8, upd: 8;
      c2P3:
          R1 = GHC.Tuple.()_closure+1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.296898 UTC

section "data" {
    Main.main_closure:
        const Main.main_info;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.297276 UTC

Main.main_entry() //  []
        { [(c2Ph,
            Main.main_info:
                const S2NP_srt-Main.main_info+8;
                const 4294967299;
                const 0;
                const 4294967311;)]
        }
    {offset
      c2Ph:
          call Main.main1_info() args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.298107 UTC

section "data" {
    Main.main2_closure:
        const Main.main2_info;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.29843 UTC

Main.main2_entry() //  []
        { [(c2Pr,
            Main.main2_info:
                const S2NP_srt-Main.main2_info+8;
                const 4294967299;
                const 0;
                const 21474836495;)]
        }
    {offset
      c2Pr:
          R2 = Main.main1_closure+1;
          call GHC.TopHandler.runMainIO1_info(R2) args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.299387 UTC

section "data" {
    :Main.main_closure:
        const :Main.main_info;
        const 0;
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.300516 UTC

:Main.main_entry() //  []
        { [(c2PB,
            :Main.main_info:
                const S2NP_srt-:Main.main_info+32;
                const 4294967299;
                const 0;
                const 4294967311;)]
        }
    {offset
      c2PB:
          call Main.main2_info() args: 8, res: 0, upd: 8;
    }
}


==================== Optimised Cmm ====================
2016-06-29 15:38:03.301117 UTC

section "relreadonly" {
    S2NP_srt:
        const Main.caf1_closure;
        const Main.main1_closure;
        const Main.caf_closure;
        const GHC.TopHandler.runMainIO1_closure;
        const Main.main2_closure;
}

