
==================== STG syntax: ====================
2016-06-29 15:38:02.877037 UTC

MinimalBase.thousand :: MinimalBase.Int
[GblId, Caf=NoCafRefs, Str=DmdType m, Unf=OtherCon []] =
    NO_CCS MinimalBase.I#! [1000];
MinimalBase.+
  :: MinimalBase.Int -> MinimalBase.Int -> MinimalBase.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U(U)><S,1*U(U)>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [ds_sBS ds1_sBT]
        case ds_sBS of _ [Occ=Dead] {
          MinimalBase.I# i1_sBV [Occ=Once] ->
              case ds1_sBT of _ [Occ=Dead] {
                MinimalBase.I# i2_sBX [Occ=Once] ->
                    case +# [i1_sBV i2_sBX] of sat_sBY {
                      __DEFAULT -> MinimalBase.I# [sat_sBY];
                    };
              };
        };
MinimalBase.$wenumFromTo [InlPrag=[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [MinimalBase.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,U><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [ww_sBZ ww1_sC0]
        case ># [ww_sBZ ww1_sC0] of sat_sC1 {
          __DEFAULT ->
              case tagToEnum# [sat_sC1] of _ [Occ=Dead] {
                GHC.Types.False ->
                    let {
                      go_sC3 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [MinimalBase.Int]
                      [LclId, Arity=1, Str=DmdType <L,U>, Unf=OtherCon []] =
                          sat-only \r srt:SRT:[] [x_sC4]
                              let {
                                sat_sC9 [Occ=Once] :: [MinimalBase.Int]
                                [LclId, Str=DmdType] =
                                    \u srt:SRT:[] []
                                        case ==# [x_sC4 ww1_sC0] of sat_sC6 {
                                          __DEFAULT ->
                                              case tagToEnum# [sat_sC6] of _ [Occ=Dead] {
                                                GHC.Types.False ->
                                                    case +# [x_sC4 1] of sat_sC8 {
                                                      __DEFAULT -> go_sC3 sat_sC8;
                                                    };
                                                GHC.Types.True -> [] [];
                                              };
                                        }; } in
                              let {
                                sat_sC5 [Occ=Once] :: MinimalBase.Int
                                [LclId, Str=DmdType] =
                                    NO_CCS MinimalBase.I#! [x_sC4];
                              } in  : [sat_sC5 sat_sC9];
                    } in  go_sC3 ww_sBZ;
                GHC.Types.True -> [] [];
              };
        };
MinimalBase.enumFromTo [InlPrag=INLINE[0]]
  :: MinimalBase.Int -> MinimalBase.Int -> [MinimalBase.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U(U)><S,1*U(U)>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sCa w1_sCb]
        case w_sCa of _ [Occ=Dead] {
          MinimalBase.I# ww1_sCd [Occ=Once] ->
              case w1_sCb of _ [Occ=Dead] {
                MinimalBase.I# ww3_sCf [Occ=Once] ->
                    MinimalBase.$wenumFromTo ww1_sCd ww3_sCf;
              };
        };
MinimalBase.one :: MinimalBase.Int
[GblId, Caf=NoCafRefs, Str=DmdType m, Unf=OtherCon []] =
    NO_CCS MinimalBase.I#! [1];
MinimalBase.printInt1
  :: MinimalBase.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U(U)><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [ds_sCg eta_sCh]
        case ds_sCg of _ [Occ=Dead] {
          MinimalBase.I# b_sCj [Occ=Once] ->
              case
                  __primcall main@main print_printIntzh [b_sCj eta_sCh]
              of
              _ [Occ=Dead]
              { (#,#) ipv_sCm [Occ=Once] _ [Occ=Dead] ->
                    (#,#) [ipv_sCm GHC.Tuple.()];
              };
        };
MinimalBase.printInt :: MinimalBase.Int -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U(U)><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B2 eta_B1] MinimalBase.printInt1 eta_B2 eta_B1;
MinimalBase.ten :: MinimalBase.Int
[GblId, Caf=NoCafRefs, Str=DmdType m, Unf=OtherCon []] =
    NO_CCS MinimalBase.I#! [10];
MinimalBase.zero :: MinimalBase.Int
[GblId, Caf=NoCafRefs, Str=DmdType m, Unf=OtherCon []] =
    NO_CCS MinimalBase.I#! [0];
MinimalBase.I# :: GHC.Prim.Int# -> MinimalBase.Int
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,U>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] MinimalBase.I# [eta_B1];

