
==================== STG syntax: ====================
2016-06-29 15:38:03.267161 UTC

Main.map [Occ=LoopBreaker]
  :: forall a_aG9 b_aGa. (a_aG9 -> b_aGa) -> [a_aG9] -> [b_aGa]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [f_s2Lh ds_s2Li]
        case ds_s2Li of _ [Occ=Dead] {
          [] -> [] [];
          : x_s2Lk [Occ=Once] xs_s2Ll [Occ=Once] ->
              let {
                sat_s2Ln [Occ=Once] :: [b_aGt]
                [LclId, Str=DmdType] =
                    \u srt:SRT:[] [] Main.map f_s2Lh xs_s2Ll; } in
              let {
                sat_s2Lm [Occ=Once] :: b_aGt
                [LclId, Str=DmdType] =
                    \u srt:SRT:[] [] f_s2Lh x_s2Lk;
              } in  : [sat_s2Lm sat_s2Ln];
        };
Main.caf2 :: MinimalBase.Int -> MinimalBase.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType, Unf=OtherCon []] =
    \r srt:SRT:[] [x_s2Lo]
        case x_s2Lo of _ [Occ=Dead] {
          MinimalBase.I# i1_s2Lq [Occ=Once] ->
              case +# [i1_s2Lq 1] of sat_s2Lr {
                __DEFAULT -> MinimalBase.I# [sat_s2Lr];
              };
        };
Main.caf1 :: [MinimalBase.Int]
[GblId, Str=DmdType] =
    \u srt:SRT:[] [] MinimalBase.$wenumFromTo 1 1000;
Main.caf :: [MinimalBase.Int]
[GblId, Str=DmdType] =
    \u srt:SRT:[rG2 :-> Main.caf1] [] Main.map Main.caf2 Main.caf1;
Main.$wsum [InlPrag=[0], Occ=LoopBreaker]
  :: [MinimalBase.Int] -> GHC.Prim.Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_s2Ls]
        case w_s2Ls of _ [Occ=Dead] {
          [] -> 0;
          : x_s2Lu [Occ=Once!] xs_s2Lv [Occ=Once] ->
              case x_s2Lu of _ [Occ=Dead] {
                MinimalBase.I# i1_s2Lx [Occ=Once] ->
                    case Main.$wsum xs_s2Lv of ww_s2Ly {
                      __DEFAULT -> +# [i1_s2Lx ww_s2Ly];
                    };
              };
        };
Main.sum [InlPrag=INLINE[0]]
  :: [MinimalBase.Int] -> MinimalBase.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_s2Lz]
        case Main.$wsum w_s2Lz of ww_s2LA {
          __DEFAULT -> MinimalBase.I# [ww_s2LA];
        };
Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=DmdType <L,U>, Unf=OtherCon []] =
    \r srt:SRT:[rG7 :-> Main.caf] [s_s2LB]
        case Main.$wsum Main.caf of ww_s2LC {
          __DEFAULT ->
              case
                  __primcall main@main print_printIntzh [ww_s2LC s_s2LB]
              of
              _ [Occ=Dead]
              { (#,#) ipv_s2LF [Occ=Once] _ [Occ=Dead] ->
                    (#,#) [ipv_s2LF GHC.Tuple.()];
              };
        };
Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=DmdType <L,U>, Unf=OtherCon []] =
    \r srt:SRT:[rG1 :-> Main.main1] [eta_B1] Main.main1 eta_B1;
Main.main2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=DmdType, Unf=OtherCon []] =
    \r srt:SRT:[rG0 :-> GHC.TopHandler.runMainIO1,
                rG1 :-> Main.main1] [eta_B1]
        GHC.TopHandler.runMainIO1 Main.main1 eta_B1;
:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=DmdType, Unf=OtherCon []] =
    \r srt:SRT:[r2J9 :-> Main.main2] [eta_B1] Main.main2 eta_B1;

